#!@PYTHON_EXECUTABLE@
# -*- coding: utf-8 -*-
# vim:filetype=python:
#
# Written by Jonas Juselius <jonas.juselius@chem.uit.no>
# University of TromsÃ¸, 2008
#

ON=1
OFF=0

executable="@MRCHEM_EXECUTABLE@"
debug=@MRCHEM_DRIVER_DEBUG@
printlevel=0
dryrun=False
version="@PROGRAM_VERSION@"

import sys, re, optparse, os, string, subprocess, tempfile, math
from copy import deepcopy

sys.path.append("@CMAKE_INSTALL_PREFIX@/share/libgetkw/")
sys.path.append("@CMAKE_INSTALL_PREFIX@/@PYTHON_SITE_INSTALL_DIR@")

from periodictable import PeriodicTable as PT
import getkw

def main():
    global topsect, debug, executable, printlevel, dryrun

    if debug == ON:
        debug = True
    else:
        debug = False

    valid_keywords = setup_keywords()
    printlevel = int(valid_keywords.getkw('printlevel')[0])
    inpfil = parse_cmdline(valid_keywords)

    if printlevel > 1:
        print "Starting " + sys.argv[0]

    if inpfil is None:
        inpfil = "mrchem.inp"

    input=getkw.GetkwParser()
    inkw=input.parseFile(inpfil)
    inkw.sanitize(valid_keywords)
    topsect=inkw.get_topsect()
    inkw.run_callbacks(valid_keywords)

    if not os.path.exists('initial_guess'):
        os.mkdir('initial_guess')
    if not os.path.exists('orbitals'):
        os.mkdir('orbitals')

    if dryrun:
        xfile='@' + inpfil
        fd=open(xfile,'w')
        print >> fd, inkw.top
        fd.close()
    else:
        # Write processed input file and run MRChem
        with tempfile.TemporaryFile(mode='w+r') as fd:
            fd.write(str(inkw.top))
            fd.seek(0)
            p = subprocess.Popen(executable, stdin=fd)
            sts = os.waitpid(p.pid, 0)[1]
            fd.close()

def parse_cmdline(valid_keywords):
    global debug, executable, printlevel, dryrun
    usage="usage: %prog [options] [config] inpfile"
    cmdln=optparse.OptionParser(usage=usage,
            version="%prog {0}".format(version))
    cmdln.add_option('-D','--dryrun', action='store_true', dest='dryrun',
            default=False, help='Only process input')
    cmdln.add_option('-d','--debug', action='store_true', dest='debug',
            default=False, help='debug')
    cmdln.add_option('-p','--print', action='store', dest='printlevel',
            help='print level')
    cmdln.add_option('-x','--executable', action='store', dest='executable',
            help='set executable name')
    (opts, args)=cmdln.parse_args()

    if opts.executable:
        executable = opts.executable

    if opts.dryrun:
        dryrun=opts.dryrun

    if opts.printlevel:
        printlevel=int(opts.printlevel)
        valid_keywords.setkw('printlevel', printlevel)

    if opts.debug == True:
        debug=opts.debug
        printlevel = 1

    if (len(args) == 0):
        inpfil=None
    elif (len(args) == 1):
        inpfil=args[0]
    else:
        cmdln.error('incorrect number of files')
        sys.exit(0)
    return inpfil

def setup_keywords():
    top=getkw.Section('toplevel', callback=verify_top)
    top.set_status(True)
    top.add_kw('rel_prec',              'DBL', -1.0)
    top.add_kw('nuc_prec',              'DBL', -1.0)
    top.add_kw('abs_prec',              'DBL', -1.0)
    top.add_kw('est_norm',              'DBL', 1.0)
    top.add_kw('energy_unit',           'STR', 'au')
    top.add_kw('printlevel',            'INT', 0)
    top.add_kw('teletype',              'BOOL', False)

    mra=getkw.Section('MRA', callback = verify_mra)
    mra.add_kw('order',                 'INT', -1)
    mra.add_kw('basis_type',            'STR', 'Interpolating')
    mra.add_kw('min_scale',             'INT', 0)
    mra.add_kw('max_scale',             'INT', 25)
    mra.add_kw('boxes',                 'INT_ARRAY', [1, 1, 1])
    mra.add_kw('corner',                'INT_ARRAY', [0, 0, 0])
    mra.add_kw('center_of_mass',        'BOOL', False)
    mra.add_kw('center_of_charge',      'BOOL', False)
    mra.add_kw('gauge_origin',          'DBL_ARRAY', [0.0, 0.0, 0.0])
    top.add_sect(mra)

    derivatives=getkw.Section('Derivatives')
    derivatives.add_kw('kinetic',       'STR', 'ABGV_55')
    derivatives.add_kw('h_orb',         'STR', 'ABGV_00')
    derivatives.add_kw('h_pso',         'STR', 'ABGV_00')
    derivatives.add_kw('dft',           'STR', 'ABGV_00')
    top.add_sect(derivatives)

    nemo=getkw.Section('NEMO')
    nemo.add_kw('correlation_factor',   'STR', 'none')
    nemo.add_kw('derivative',           'STR', 'ABGV_00')
    nemo.add_kw('parameter',            'DBL', 2.0)
    top.add_sect(nemo)

    molecule=getkw.Section('Molecule', callback = verify_molecule)
    molecule.add_kw('charge',           'INT', 0)
    molecule.add_kw('multiplicity',     'INT', 1)
    molecule.add_kw('angstrom',         'BOOL', False)
    molecule.add_kw('coords',           'DATA')
    top.add_sect(molecule)

    wavefunction=getkw.Section('WaveFunction')
    wavefunction.add_kw('restricted',   'BOOL', True)
    wavefunction.add_kw('method',       'STR', 'HF')
    top.add_sect(wavefunction)

    dft=getkw.Section('DFT', callback = verify_dft)
    dft.add_kw('spin',                  'BOOL', False)
    dft.add_kw('orbital_free',          'BOOL', False)
    dft.add_kw('use_gamma',             'BOOL', False)
    dft.add_kw('exact_exchange',        'DBL', 0.0)
    dft.add_kw('density_cutoff',        'DBL', 0.0)
    dft.add_kw('functionals',           'DATA')
    dft.add_kw('func_coefs',            'DBL_ARRAY')
    top.add_sect(dft)

    properties=getkw.Section('Properties')
    properties.add_kw('scf_energy',             'BOOL', False)
    properties.add_kw('dipole_moment',          'BOOL', False)
    properties.add_kw('quadrupole_moment',      'BOOL', False)
    properties.add_kw('polarizability',         'BOOL', False)
    properties.add_kw('hyperpolarizability',    'BOOL', False)
    properties.add_kw('optical_rotation',       'BOOL', False)
    properties.add_kw('magnetizability',        'BOOL', False)
    properties.add_kw('nmr_shielding',          'BOOL', False)
    properties.add_kw('spin_spin_coupling',     'BOOL', False)
    properties.add_kw('hyperfine_coupling',     'BOOL', False)
    top.add_sect(properties)

    external_field=getkw.Section('ExternalField', callback=verify_ext_field)
    external_field.add_kw('electric_run',       'BOOL', False)
    external_field.add_kw('electric_field',     'DBL_ARRAY') 
    external_field.add_kw('magnetic_run',       'BOOL', False)
    external_field.add_kw('magnetic_field',     'DBL_ARRAY') 
    top.add_sect(external_field)

    polarizability=getkw.Section('Polarizability', callback=verify_pol)
    polarizability.add_kw('velocity',           'BOOL', False)
    polarizability.add_kw('frequency',          'DBL_ARRAY')
    polarizability.add_kw('wavelength',         'DBL_ARRAY')
    top.add_sect(polarizability)

    optical_rotation=getkw.Section('OpticalRotation', callback=verify_optrot)
    optical_rotation.add_kw('perturbation',     'STR', 'E')
    optical_rotation.add_kw('velocity',         'BOOL', False)
    optical_rotation.add_kw('frequency',        'DBL_ARRAY')
    optical_rotation.add_kw('wavelength',       'DBL_ARRAY')
    top.add_sect(optical_rotation)

    nmr=getkw.Section('NMRShielding', callback=verify_nmr)
    nmr.add_kw('perturbation',          'STR', 'B')
    nmr.add_kw('nucleus_k',             'INT_ARRAY')
    top.add_sect(nmr)

    sscc=getkw.Section('SpinSpinCoupling', callback=verify_sscc)
    sscc.add_kw('nucleus_k',            'INT_ARRAY')
    sscc.add_kw('nucleus_l',            'INT_ARRAY')
    top.add_sect(sscc)

    hfcc=getkw.Section('HyperfineCoupling', callback=verify_hfcc)
    hfcc.add_kw('nucleus_k',            'INT_ARRAY')
    top.add_sect(hfcc)

    scf=getkw.Section('SCF', callback=verify_scf)
    scf.add_kw('run',                   'BOOL', True)
    scf.add_kw('max_iter',              'INT', -1)
    scf.add_kw('kain',                  'INT', 0)
    scf.add_kw('rotation',              'INT', 0)
    scf.add_kw('canonical',             'BOOL', True)
    scf.add_kw('orbital_thrs',          'DBL', -1.0)
    scf.add_kw('property_thrs',         'DBL', -1.0)
    scf.add_kw('lambda_thrs',           'DBL', -1.0)
    scf.add_kw('orbital_prec',          'DBL_ARRAY', [-1.0,-1.0])
    scf.add_kw('initial_guess',         'STR', 'none')
    scf.add_kw('write_orbitals',        'BOOL', False)
    top.add_sect(scf)

    kinetic_free=getkw.Section('KineticFree', callback=verify_kinetic_free)
    kinetic_free.add_kw('run',                   'BOOL', False)
    kinetic_free.add_kw('max_iter',              'INT', -1)
    kinetic_free.add_kw('canonical',             'BOOL', True)
    kinetic_free.add_kw('orbital_thrs',          'DBL', -1.0)
    kinetic_free.add_kw('property_thrs',         'DBL', -1.0)
    top.add_sect(kinetic_free)

    response=getkw.Section('Response', callback=verify_response)
    response.add_kw('run',              'BOOL', True)
    response.add_kw('max_iter',         'INT', -1)
    response.add_kw('kain',             'INT', 0)
    response.add_kw('canonical',        'BOOL', True)
    response.add_kw('orbital_thrs',     'DBL', 1.0)
    response.add_kw('property_thrs',    'DBL', 1.0)
    response.add_kw('directions',       'INT_ARRAY', [1,1,1])
    response.add_kw('orbital_prec',     'DBL_ARRAY', [1.0e-4,-1.0])
    response.add_kw('initial_guess',    'STR', 'none')
    response.add_kw('write_orbitals',   'BOOL', False)
    top.add_sect(response)

    initial=getkw.Section('LSDalton')
    initial.add_kw('run',               'BOOL', False)
    initial.add_kw('basis',             'STR', '3-21G')
    initial.add_kw('method',            'STR', 'HF')
    top.add_sect(initial)

    files=getkw.Section('Files')
    files.add_kw('start_orbitals',      'STR', 'orbitals/phi')
    files.add_kw('final_orbitals',      'STR', 'orbitals/phi')
    files.add_kw('start_x_orbs',        'STR', 'orbitals/phi_x')
    files.add_kw('final_x_orbs',        'STR', 'orbitals/phi_x')
    files.add_kw('start_y_orbs',        'STR', 'orbitals/phi_y')
    files.add_kw('final_y_orbs',        'STR', 'orbtials/phi_y')
    files.add_kw('basis_set',           'STR', 'initial_guess/mrchem.bas')
    files.add_kw('dens_mat_a',          'STR', 'initial_guess/mrchem.densa')
    files.add_kw('dens_mat_b',          'STR', 'initial_guess/mrchem.densb')
    files.add_kw('fock_mat',            'STR', 'initial_guess/mrchem.fock')
    files.add_kw('energy_vec',          'STR', 'initial_guess/mrchem.en')
    files.add_kw('mo_mat_a',            'STR', 'initial_guess/mrchem.moa')
    files.add_kw('mo_mat_b',            'STR', 'initial_guess/mrchem.mob')
    top.add_sect(files)

    pilot=getkw.Section('Pilot')
    pilot.add_kw('run_projection',      'BOOL', False)
    pilot.add_kw('run_addition',        'BOOL', False)
    pilot.add_kw('run_multiplication',  'BOOL', False)
    pilot.add_kw('run_poisson',         'BOOL', False)
    pilot.add_kw('run_derivative',      'BOOL', False)
    pilot.add_kw('run_scf',             'BOOL', False)
    pilot.add_kw('run_molecule',        'BOOL', False)
    top.add_sect(pilot)

    return top

def verify_top(top):
    if not top.get('rel_prec').is_set():
        if not top.get('est_norm').is_set():
            mol = topsect.fetch_sect('Molecule')
            if mol.get('coords').is_set():
                coords = mol.get('coords').get()
                est_au = estimate_energy(coords)
                if top['energy_unit'][0] == 'eV':
                    top['est_norm'][0] = 27.2*est_au
                elif top['energy_unit'][0] == 'kcal':
                    top['est_norm'][0] = 627.5*est_au
                elif top['energy_unit'][0] == 'kJ':
                    top['est_norm'][0] = 2625.5*est_au
                else:
                    top['est_norm'][0] = est_au
                print "\nPrecision is set by energy estimate Z^(5/2)"
        top['rel_prec'][0] = 10*top['abs_prec'][0] / top['est_norm'][0]
        print "   est_norm  ", top['est_norm'][0]
        print "   abs_prec  ", top['abs_prec'][0]
        print "   rel_prec  ", top['rel_prec'][0]

    if not top.get('nuc_prec').is_set():
        top['nuc_prec'][0] = top['rel_prec'][0]

def verify_mra(mra):
    basis_type=mra.get('basis_type')
    wlet=basis_type.get()
    if re.match('legen.*', wlet, re.I):
        basis_type.set("L")
    elif re.match('inter.*', wlet, re.I):
        basis_type.set("I")
    else:
        print "Invalid basis type: ", basis_type
        sys.exit(1)
    if not mra.get('order').is_set():
        mra.get('order')[0] = int(math.ceil(-1.5*math.log10(topsect['rel_prec'][0])));
    if not mra.get('gauge_origin').is_set():
        mra.get('center_of_mass')[0] = True

def verify_molecule(mol):
    AA = 1.0
    if mol.get('angstrom').get():
        AA = 1.889725989
    coords = mol.get('coords').get()
    i = 0;
    for line in coords[:]:
        sp = line.split()
        elm = sp[0].lower()
        x_a, y_a, z_a = map(float, sp[1:])
        x_b, y_b, z_b = AA*x_a, AA*y_a, AA*z_a
        coords[i] = "%s       % 10.10f    % 10.10f    % 10.10f" % (elm.title(), x_b, y_b, z_b)
        i = i+1
    mol.get('angstrom').set(False)

def verify_response(rsp):
    if not rsp.get('canonical').is_set():
        scf = topsect.fetch_sect('SCF')
        rsp['canonical'][0] = scf['canonical'][0]
    if rsp['orbital_prec'][1] < 0:
        rsp['orbital_prec'][1] = topsect['rel_prec'][0]
    if rsp['orbital_prec'][0] < 0:
        rsp['orbital_prec'][0] = rsp['orbital_prec'][1]
    if rsp['property_thrs'][0] < 0:
        rsp['property_thrs'][0] = 1.0

def verify_ext_field(ext_field):
    if ext_field.get('electric_field').is_set():
        elf = ext_field['electric_field'].get()
        if (len(elf) != 3):
            print "invalid length of electric field vector:", len(elf)
            exit()
        val = math.sqrt(elf[0]**2 + elf[1]**2 + elf[2]**2)
        if val > 10.0:
            print "magnitude of el. field is greater than 10.0:", val
            exit()
            
    if ext_field.get('magnetic_field').is_set():
        maf = ext_field['magnetic_field'].get()
        if (len(maff) != 3):
            print "invalid length of magnetic field vector:", len(maf)
            exit()
        val = math.sqrt(maf[0]**2 + maf[1]**2 + maf[2]**2)
        if val > 10.0:
            print "magnitude of mag. field is greater than 10.0:", val
            exit()

def verify_pol(pol):
    if pol.get('wavelength').is_set():
        for wlength in pol['wavelength'].get():
            omega = 45.5640/wlength
            pol['frequency'].get().append(omega);
    if len(pol['frequency'].get()) == 0:
        pol['frequency'].get().append(0.0);

def verify_optrot(optrot):
    pert = optrot['perturbation'].get()
    if pert != 'B' and pert != 'E':
        print "invalid optical rotation perturbation:", pert
        exit()
    if optrot.get('wavelength').is_set():
        for wlength in optrot['wavelength'].get():
            omega = 45.5640/wlength
            optrot['frequency'].get().append(omega);
    if len(optrot['frequency'].get()) == 0:
        optrot['frequency'].get().append(0.0);

def verify_nmr(nmr):
    pert = nmr['perturbation'].get()
    if pert != 'B' and pert != 'M':
        print "invalid NMR shielding perturbation:", pert
        exit()
    if not nmr.get('nucleus_k').is_set():
        nmr['nucleus_k'].get().append(-1);

def verify_sscc(sscc):
    if not sscc.get('nucleus_k').is_set():
        sscc['nucleus_k'].get().append(-1);
    if not sscc.get('nucleus_l').is_set():
        sscc['nucleus_l'].get().append(-1);

def verify_hfcc(hfcc):
    if not hfcc.get('nucleus_k').is_set():
        hfcc['nucleus_k'].get().append(-1);

def verify_dft(dft):
    if not dft['spin'].is_set():
        wf = topsect.fetch_sect('WaveFunction')
        if wf['restricted'][0]:
            dft['spin'][0] = False
        else:
            dft['spin'][0] = True

    n = 0
    for line in dft['functionals'][:]:
        split_line = line.split()
        if len(split_line) > 1:
            func = split_line[0]
            coef = split_line[1]
        else:
            func = split_line[0]
            coef = 1.0
        dft['func_coefs'].get().append(coef)
        dft['functionals'][n] = func
        n += 1

def verify_scf(scf):
    if scf['orbital_prec'][1] < 0:
        scf['orbital_prec'][1] = topsect['rel_prec'][0]
    if scf['orbital_prec'][0] < 0:
        scf['orbital_prec'][0] = scf['orbital_prec'][1]
    if not scf['orbital_thrs'].is_set() and not scf['property_thrs'].is_set():
        scf['property_thrs'][0] = topsect['rel_prec'][0]/10
        scf['orbital_thrs'][0] = math.sqrt(scf['property_thrs'][0])

def verify_kinetic_free(kinetic_free):
    if not kinetic_free['orbital_thrs'].is_set() and not kinetic_free['property_thrs'].is_set():
        kinetic_free['property_thrs'][0] = topsect['rel_prec'][0]/10
        kinetic_free['orbital_thrs'][0] = math.sqrt(kinetic_free['property_thrs'][0])

# Estimate total energy of a moleucule as the sum of the nuclear charges
# to the power Z^(5/2). This is to get an order of magnitude estimate that
# is used to set the precision parameter in mrchem in case of abs_prec.
def estimate_energy(coords):
    est_en = 0.0
    for line in coords[:]:
        sp = line.split()
        elm = sp[0].lower()
        Z = PT[elm].Z
        est_en += pow(Z, 2.5)
    return est_en


if __name__ == '__main__':
    main()

